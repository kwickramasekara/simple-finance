"use client";

import Alert from "@/components/common/alert";
import OTP from "@/components/forms/otp";
import {
  Dialog,
  DialogContent,
  DialogClose,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { useEffect, useState } from "react";
import { createMFAChallenge, disableMFAAction } from "@/lib/api/account";
import Loading from "@/components/common/loading";
import { useFormState } from "react-dom";
import { Button } from "@/components/ui/button";
import { CircleCheck } from "lucide-react";

export default function MFADisableDialog({
  isOpen,
  setIsOpen,
  setMfaEnabled,
}: {
  isOpen: boolean;
  setIsOpen: (isOpen: boolean) => void;
  setMfaEnabled: (mfa: boolean) => void;
}) {
  const initialState = {
    error: "",
    success: false,
  };
  const [challengeId, setChallengeId] = useState("");
  const [challengeError, setChallengeError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [state, formAction] = useFormState(disableMFAAction, initialState);

  const init = async function () {
    setIsLoading(true);

    const response = await createMFAChallenge();

    if (response.error) {
      setChallengeError(response.error);
    } else {
      setChallengeId(response.success);
    }
    setIsLoading(false);
  };

  useEffect(() => {
    if (isOpen) init();
    else {
      // Reset the state on close of dialog.
      // This is important to prevent the dialog from showing the previous state when opened again.
      state.success = initialState.success;
      state.error = initialState.error;
      setChallengeId("");
    }
  }, [isOpen]);

  useEffect(() => {
    if (state.success) setMfaEnabled(false);
  }, [state.success]);

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Multi-factor authentication</DialogTitle>
        </DialogHeader>
        <>
          {challengeError && <Alert type="error">{challengeError}</Alert>}

          {isLoading && <Loading />}

          {challengeId && !state.success && (
            <>
              <p className="text-sm text-muted-foreground">
                Please enter the OTP code generated by your MFA device to
                continue disabling MFA.
              </p>
              <form action={formAction}>
                <input type="hidden" name="challengeId" value={challengeId} />
                <input type="hidden" name="path" value="/account" />
                <OTP />
              </form>
              {state.error && <Alert type="error">{state.error}</Alert>}
            </>
          )}

          {state.success && (
            <>
              <div className="flex flex-col gap-4 my-4">
                <CircleCheck size={36} className="text-green-500 mx-auto" />
                <p className="text-sm text-muted-foreground text-center">
                  Multi-factor authentication has been disabled.
                </p>
              </div>
            </>
          )}
        </>
        <DialogFooter>
          <DialogClose asChild>
            <Button>Close</Button>
          </DialogClose>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
